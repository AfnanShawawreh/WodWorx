{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\"; // import Router from \"next/router\";\n// import cookie from \"js-cookie\";\n// import Link from \"next/link\";\n\nimport { makeStyles } from '@material-ui/core/styles'; // import TextField from '@material-ui/core/TextField';\n\nimport Button from \"@material-ui/core/Button\";\nimport Layout from \"../components/Layout\";\nimport axios from \"axios\";\n\nconst Login = () => {\n  const {\n    0: loginError,\n    1: setLoginError\n  } = useState(\"\");\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    axios.post(\"http://localhost:5000/login\", {\n      email,\n      password\n    }).then(res => {\n      console.log(\"res\", res);\n\n      if (res.data.token) {\n        AsyncStorage.setItem(\"token\", JSON.stringify(res.data.token)); // cookie.set('token', data.token, {expires: 2});\n      } else {\n        if (res.data.errors.password === \"Incorrect email or password\") {\n          alert(\"Incorrect email or password\");\n        }\n\n        if (res.data.errors.email === \"Email cannot be blank.\") {\n          alert(\"Email cannot be blank.\");\n        }\n\n        if (res.data.errors.password === \"password cannot be blank.\") {\n          alert(\"password cannot be blank.\");\n        }\n\n        if (res.data.errors.email === \"Email is not a valid email address.\") {\n          alert(\"Email cannot be blank.\");\n        }\n      }\n    }).catch(err => {\n      console.log(\"error in request\", err);\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Layout, null), __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(\"p\", null, \"Login\"), __jsx(\"input\", {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    onChange: e => setEmail(e.target.value)\n  }), __jsx(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value)\n  }), __jsx(Button, {\n    type: \"submit\",\n    value: \"Submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    disableElevation: true\n  }, \" Login\"), loginError && __jsx(\"p\", {\n    style: {\n      color: \"red\"\n    }\n  }, loginError)));\n};\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}